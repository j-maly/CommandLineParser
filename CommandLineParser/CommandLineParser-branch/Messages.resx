<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CERT_REMARKS" xml:space="preserve">
    <value>Argument combinations remarks:</value>
  </data>
  <data name="EXC_ADDITIONAL_ARGS_TOO_EARLY" xml:space="preserve">
    <value>AdditionalArguments cannot be accessed before ParseCommandLine is called.</value>
  </data>
  <data name="EXC_ADDITONAL_ARGS_FORBIDDEN" xml:space="preserve">
    <value>AcceptAdditionalArguments is set to false therefore AdditionalArguments can not be read.</value>
  </data>
  <data name="EXC_ARG_BOUNDED_GREATER_THAN_MAX" xml:space="preserve">
    <value>Argument value {0} is greater then maximum value {1}</value>
  </data>
  <data name="EXC_ARG_BOUNDED_LESSER_THAN_MIN" xml:space="preserve">
    <value>Argument value {0} is lesser then minimum value {1}</value>
  </data>
  <data name="EXC_ARG_ENUM_OUT_OF_RANGE" xml:space="preserve">
    <value>Value {0} is not allowed for argument {1}</value>
  </data>
  <data name="EXC_ARG_NOT_ONE_CHAR" xml:space="preserve">
    <value>ShortName of an argument must not be whitespace character.</value>
  </data>
  <data name="EXC_ARG_NOT_ONE_WORD" xml:space="preserve">
    <value>LongName of an argument must be one word.</value>
  </data>
  <data name="EXC_ARG_SWITCH_PRINT" xml:space="preserve">
    <value>Argument: {0} value: {1}</value>
  </data>
  <data name="EXC_ARG_UNKNOWN" xml:space="preserve">
    <value>Unknown argument found: {0}.</value>
  </data>
  <data name="EXC_ARG_VALUE_MISSING" xml:space="preserve">
    <value>Value argument {0} must be followed by a value, another argument ({1}) found instead</value>
  </data>
  <data name="EXC_ARG_VALUE_MISSING2" xml:space="preserve">
    <value>Value argument {0} must be followed by a value.</value>
  </data>
  <data name="EXC_ARG_VALUE_MULTIPLE_OCCURS" xml:space="preserve">
    <value>Argument {0} can not be used multiple times.</value>
  </data>
  <data name="EXC_ARG_VALUE_PRINT" xml:space="preserve">
    <value>Argument: {0}, type: {3}, value: {2} (converted from: {1})</value>
  </data>
  <data name="EXC_ARG_VALUE_PRINT_MULTIPLE" xml:space="preserve">
    <value>Argument: {0}, type: {3}, occured {1}x values: {2}</value>
  </data>
  <data name="EXC_ARG_VALUE_STANDARD_CONVERT_FAILED" xml:space="preserve">
    <value>Failed to convert string {0} to type {1} using standard {1}.ParseCommandLine. Use strings in accepted format or define custom conversion using ConvertValueHandler.</value>
  </data>
  <data name="EXC_ARG_VALUE_STRINGVALUE_ACCESS" xml:space="preserve">
    <value>Arguments StringValue can be read after ParseCommandLine is called.</value>
  </data>
  <data name="EXC_ARG_VALUE_USER_CONVERT_MISSING" xml:space="preserve">
    <value>Type {0} of argument {1} is not a built-in type. Set ConvertValueHandler to a conversion routine for this type or define static method Parse(string stringValue, CultureInfo cultureInfo) that can Parse your type from string. </value>
  </data>
  <data name="EXC_BAD_ARG_IN_GROUP" xml:space="preserve">
    <value>Grouping of multiple short name arguments in one word (e.g. -a -b into -ab) is allowed only for switch arguments. Argument {0} is not a switch argument.</value>
  </data>
  <data name="EXC_BINDING" xml:space="preserve">
    <value>Binding of the argument {0} to the field {1} of the object {2} failed.</value>
  </data>
  <data name="EXC_DIR_NOT_FOUND" xml:space="preserve">
    <value>Directory not found : {0} and DirectoryMustExist flag is set to true.</value>
  </data>
  <data name="EXC_FILE_MUST_EXIST" xml:space="preserve">
    <value>OpenFile should not be called when FileMustExist flag is not set.</value>
  </data>
  <data name="EXC_FILE_NOT_FOUND" xml:space="preserve">
    <value>File not found : {0} and FileMustExist flag is set to true.</value>
  </data>
  <data name="EXC_FORMAT_LONGNAME_PREFIX" xml:space="preserve">
    <value>Only short argument names (single character) are allowed after single '-' character (e.g. -v). For long names use double '-' format (e.g. '--ver'). Wrong argument is: {0}</value>
  </data>
  <data name="EXC_FORMAT_SHORTNAME_PREFIX" xml:space="preserve">
    <value>If short name argument is used, it must be prefixed with single '-' character. Wrong argument is: {0}</value>
  </data>
  <data name="EXC_FORMAT_SINGLEHYPHEN" xml:space="preserve">
    <value>Found character '-' not followed by an argument.</value>
  </data>
  <data name="EXC_GROUP_AT_LEAST_ONE" xml:space="preserve">
    <value>At least one of these arguments: {0} must be used.</value>
  </data>
  <data name="EXC_GROUP_DISTINCT" xml:space="preserve">
    <value>None of these argumens: {0} can be used together with any of these: {1}.</value>
  </data>
  <data name="EXC_GROUP_EXACTLY_ONE_MORE_USED" xml:space="preserve">
    <value>Only one of these arguments: {0} can be used.</value>
  </data>
  <data name="EXC_GROUP_EXACTLY_ONE_NONE_USED" xml:space="preserve">
    <value>One of these arguments: {0} must be used.</value>
  </data>
  <data name="EXC_GROUP_ONE_OR_NONE_MORE_USED" xml:space="preserve">
    <value>These argumens can not be used together: {0}.</value>
  </data>
  <data name="EXC_NONNEGATIVE" xml:space="preserve">
    <value>The value must be non negative.</value>
  </data>
  <data name="MSG_ADDITIONAL_ARGUMENTS" xml:space="preserve">
    <value>Additional arguments:</value>
  </data>
  <data name="MSG_COMMAND_LINE" xml:space="preserve">
    <value>Command line:</value>
  </data>
  <data name="MSG_OPTIONAL" xml:space="preserve">
    <value> [optional] </value>
  </data>
  <data name="MSG_PARSED_ARGUMENTS" xml:space="preserve">
    <value>Parsed Arguments:</value>
  </data>
  <data name="MSG_PARSING_RESULTS" xml:space="preserve">
    <value>Parsing results:</value>
  </data>
  <data name="MSG_USAGE" xml:space="preserve">
    <value>Usage:</value>
  </data>
  <data name="EXC_MISSING_MANDATORY_ARGUMENT" xml:space="preserve">
    <value>Argument {0} is not marked as optional and was not found on the commad line.</value>
  </data>
  <data name="EXC_ADDITIONAL_ARGUMENTS_FOUND" xml:space="preserve">
    <value>Additional arguments found and parser does not accept additional arguments. Set AcceptAdditionalArguments to true if you want to accept them. </value>
  </data>
  <data name="EXC_NOT_ENOUGH_ADDITIONAL_ARGUMENTS" xml:space="preserve">
    <value>Not enough additional arguments. Needed {0} additional arguments.</value>
  </data>
</root>