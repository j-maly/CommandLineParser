//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommandLineParser {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CommandLineParser.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument combinations remarks:.
        /// </summary>
        internal static string CERT_REMARKS {
            get {
                return ResourceManager.GetString("CERT_REMARKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AdditionalArguments cannot be accessed before ParseCommandLine is called..
        /// </summary>
        internal static string EXC_ADDITIONAL_ARGS_TOO_EARLY {
            get {
                return ResourceManager.GetString("EXC_ADDITIONAL_ARGS_TOO_EARLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional arguments found and parser does not accept additional arguments. Set AcceptAdditionalArguments to true if you want to accept them. .
        /// </summary>
        internal static string EXC_ADDITIONAL_ARGUMENTS_FOUND {
            get {
                return ResourceManager.GetString("EXC_ADDITIONAL_ARGUMENTS_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AcceptAdditionalArguments is set to false therefore AdditionalArguments can not be read..
        /// </summary>
        internal static string EXC_ADDITONAL_ARGS_FORBIDDEN {
            get {
                return ResourceManager.GetString("EXC_ADDITONAL_ARGS_FORBIDDEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument value {0} is greater then maximum value {1}.
        /// </summary>
        internal static string EXC_ARG_BOUNDED_GREATER_THAN_MAX {
            get {
                return ResourceManager.GetString("EXC_ARG_BOUNDED_GREATER_THAN_MAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument value {0} is lesser then minimum value {1}.
        /// </summary>
        internal static string EXC_ARG_BOUNDED_LESSER_THAN_MIN {
            get {
                return ResourceManager.GetString("EXC_ARG_BOUNDED_LESSER_THAN_MIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value {0} is not allowed for argument {1}.
        /// </summary>
        internal static string EXC_ARG_ENUM_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("EXC_ARG_ENUM_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShortName of an argument must not be whitespace character..
        /// </summary>
        internal static string EXC_ARG_NOT_ONE_CHAR {
            get {
                return ResourceManager.GetString("EXC_ARG_NOT_ONE_CHAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LongName of an argument must be one word..
        /// </summary>
        internal static string EXC_ARG_NOT_ONE_WORD {
            get {
                return ResourceManager.GetString("EXC_ARG_NOT_ONE_WORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument: {0} value: {1}.
        /// </summary>
        internal static string EXC_ARG_SWITCH_PRINT {
            get {
                return ResourceManager.GetString("EXC_ARG_SWITCH_PRINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown argument found: {0}..
        /// </summary>
        internal static string EXC_ARG_UNKNOWN {
            get {
                return ResourceManager.GetString("EXC_ARG_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value argument {0} must be followed by a value, another argument ({1}) found instead.
        /// </summary>
        internal static string EXC_ARG_VALUE_MISSING {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value argument {0} must be followed by a value..
        /// </summary>
        internal static string EXC_ARG_VALUE_MISSING2 {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_MISSING2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} can not be used multiple times..
        /// </summary>
        internal static string EXC_ARG_VALUE_MULTIPLE_OCCURS {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_MULTIPLE_OCCURS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument: {0}, type: {3}, value: {2} (converted from: {1}).
        /// </summary>
        internal static string EXC_ARG_VALUE_PRINT {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_PRINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument: {0}, type: {3}, occured {1}x values: {2}.
        /// </summary>
        internal static string EXC_ARG_VALUE_PRINT_MULTIPLE {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_PRINT_MULTIPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to convert string {0} to type {1} using standard {1}.ParseCommandLine. Use strings in accepted format or define custom conversion using ConvertValueHandler..
        /// </summary>
        internal static string EXC_ARG_VALUE_STANDARD_CONVERT_FAILED {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_STANDARD_CONVERT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arguments StringValue can be read after ParseCommandLine is called..
        /// </summary>
        internal static string EXC_ARG_VALUE_STRINGVALUE_ACCESS {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_STRINGVALUE_ACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type {0} of argument {1} is not a built-in type. Set ConvertValueHandler to a conversion routine for this type or define static method Parse(string stringValue, CultureInfo cultureInfo) that can Parse your type from string. .
        /// </summary>
        internal static string EXC_ARG_VALUE_USER_CONVERT_MISSING {
            get {
                return ResourceManager.GetString("EXC_ARG_VALUE_USER_CONVERT_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Grouping of multiple short name arguments in one word (e.g. -a -b into -ab) is allowed only for switch arguments. Argument {0} is not a switch argument..
        /// </summary>
        internal static string EXC_BAD_ARG_IN_GROUP {
            get {
                return ResourceManager.GetString("EXC_BAD_ARG_IN_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding of the argument {0} to the field {1} of the object {2} failed..
        /// </summary>
        internal static string EXC_BINDING {
            get {
                return ResourceManager.GetString("EXC_BINDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory not found : {0} and DirectoryMustExist flag is set to true..
        /// </summary>
        internal static string EXC_DIR_NOT_FOUND {
            get {
                return ResourceManager.GetString("EXC_DIR_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OpenFile should not be called when FileMustExist flag is not set..
        /// </summary>
        internal static string EXC_FILE_MUST_EXIST {
            get {
                return ResourceManager.GetString("EXC_FILE_MUST_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found : {0} and FileMustExist flag is set to true..
        /// </summary>
        internal static string EXC_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("EXC_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only short argument names (single character) are allowed after single &apos;-&apos; character (e.g. -v). For long names use double &apos;-&apos; format (e.g. &apos;--ver&apos;). Wrong argument is: {0}.
        /// </summary>
        internal static string EXC_FORMAT_LONGNAME_PREFIX {
            get {
                return ResourceManager.GetString("EXC_FORMAT_LONGNAME_PREFIX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If short name argument is used, it must be prefixed with single &apos;-&apos; character. Wrong argument is: {0}.
        /// </summary>
        internal static string EXC_FORMAT_SHORTNAME_PREFIX {
            get {
                return ResourceManager.GetString("EXC_FORMAT_SHORTNAME_PREFIX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found character &apos;-&apos; not followed by an argument..
        /// </summary>
        internal static string EXC_FORMAT_SINGLEHYPHEN {
            get {
                return ResourceManager.GetString("EXC_FORMAT_SINGLEHYPHEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one of these arguments: {0} must be used..
        /// </summary>
        internal static string EXC_GROUP_AT_LEAST_ONE {
            get {
                return ResourceManager.GetString("EXC_GROUP_AT_LEAST_ONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of these argumens: {0} can be used together with any of these: {1}..
        /// </summary>
        internal static string EXC_GROUP_DISTINCT {
            get {
                return ResourceManager.GetString("EXC_GROUP_DISTINCT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one of these arguments: {0} can be used..
        /// </summary>
        internal static string EXC_GROUP_EXACTLY_ONE_MORE_USED {
            get {
                return ResourceManager.GetString("EXC_GROUP_EXACTLY_ONE_MORE_USED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of these arguments: {0} must be used..
        /// </summary>
        internal static string EXC_GROUP_EXACTLY_ONE_NONE_USED {
            get {
                return ResourceManager.GetString("EXC_GROUP_EXACTLY_ONE_NONE_USED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These argumens can not be used together: {0}..
        /// </summary>
        internal static string EXC_GROUP_ONE_OR_NONE_MORE_USED {
            get {
                return ResourceManager.GetString("EXC_GROUP_ONE_OR_NONE_MORE_USED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} is not marked as optional and was not found on the command line..
        /// </summary>
        internal static string EXC_MISSING_MANDATORY_ARGUMENT {
            get {
                return ResourceManager.GetString("EXC_MISSING_MANDATORY_ARGUMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value must be non negative..
        /// </summary>
        internal static string EXC_NONNEGATIVE {
            get {
                return ResourceManager.GetString("EXC_NONNEGATIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough additional arguments. Needed {0} additional arguments..
        /// </summary>
        internal static string EXC_NOT_ENOUGH_ADDITIONAL_ARGUMENTS {
            get {
                return ResourceManager.GetString("EXC_NOT_ENOUGH_ADDITIONAL_ARGUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional arguments:.
        /// </summary>
        internal static string MSG_ADDITIONAL_ARGUMENTS {
            get {
                return ResourceManager.GetString("MSG_ADDITIONAL_ARGUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command line:.
        /// </summary>
        internal static string MSG_COMMAND_LINE {
            get {
                return ResourceManager.GetString("MSG_COMMAND_LINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  [optional] .
        /// </summary>
        internal static string MSG_OPTIONAL {
            get {
                return ResourceManager.GetString("MSG_OPTIONAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parsed Arguments:.
        /// </summary>
        internal static string MSG_PARSED_ARGUMENTS {
            get {
                return ResourceManager.GetString("MSG_PARSED_ARGUMENTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parsing results:.
        /// </summary>
        internal static string MSG_PARSING_RESULTS {
            get {
                return ResourceManager.GetString("MSG_PARSING_RESULTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:.
        /// </summary>
        internal static string MSG_USAGE {
            get {
                return ResourceManager.GetString("MSG_USAGE", resourceCulture);
            }
        }
    }
}
